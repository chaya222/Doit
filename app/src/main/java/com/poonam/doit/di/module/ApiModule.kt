package com.poonam.doit.di.moduleimport android.app.Applicationimport android.content.Contextimport com.google.gson.Gsonimport com.google.gson.GsonBuilderimport com.poonam.doit.api.ApiInterfaceimport com.readystatesoftware.chuck.ChuckInterceptorimport dagger.Moduleimport dagger.Providesimport okhttp3.Cacheimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.io.Fileimport java.util.concurrent.TimeUnitimport javax.inject.Singleton@Moduleclass ApiModule {    @Provides    @Singleton    internal fun provideGson(): Gson {        val gsonBuilder = GsonBuilder()        return gsonBuilder.create()    }    @Provides    @Singleton    internal fun provideCache(application: Application): Cache {        val cacheSize = (10 * 1024 * 1024).toLong()        val httpCacheDirectory = File(application.cacheDir, "http-cache")        return Cache(httpCacheDirectory, cacheSize)    }    @Provides    @Singleton    internal fun provideOkHttpClient(cache: Cache, context: Context): OkHttpClient {        val logging = HttpLoggingInterceptor()        logging.level = HttpLoggingInterceptor.Level.BODY        val httpClient = OkHttpClient.Builder()        httpClient.cache(cache)        httpClient.addInterceptor(logging)        httpClient.addNetworkInterceptor(ChuckInterceptor(context))        httpClient.connectTimeout(30, TimeUnit.SECONDS)        httpClient.readTimeout(30, TimeUnit.SECONDS)        return httpClient.build()    }    @Provides    @Singleton    internal fun provideRetrofit(gson : Gson,okHttpClient: OkHttpClient) : Retrofit{        return Retrofit.Builder()            .client(okHttpClient)            .addConverterFactory(GsonConverterFactory.create(gson))            .baseUrl("https://api.themoviedb.org/3/")            .build()    }    @Provides    @Singleton    internal fun provideApiService(retrofit: Retrofit) : ApiInterface{            return retrofit.create(ApiInterface::class.java)    }}